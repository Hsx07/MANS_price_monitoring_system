# price_monitor_tester.py - Clean testing script for price monitoring
import os
import time
import smtplib
import pandas as pd
from datetime import datetime

# Handle email imports safely with CORRECT case sensitivity
try:
    from email.mime.text import MIMEText
    from email.mime.multipart import MIMEMultipart
    EMAIL_AVAILABLE = True
    print("Email modules imported successfully!")
except ImportError as e:
    print(f"Email import failed: {e}")
    EMAIL_AVAILABLE = False
    # Create dummy classes as fallback
    class MIMEText:
        def __init__(self, *args, **kwargs): pass
        def attach(self, *args): pass
        def as_string(self): return ""
        def __setitem__(self, key, value): pass
    
    class MIMEMultipart:
        def __init__(self, *args, **kwargs): pass
        def attach(self, *args): pass
        def as_string(self): return ""
        def __setitem__(self, key, value): pass

class PriceMonitorTester:
    def __init__(self):
        self.config = self.load_config()
        self.test_products = []
        
    def load_config(self):
        """Load email configuration from existing config.csv"""
        config = {
            'email_address': '',
            'smtp_username': '',
            'smtp_password': '',
            'smtp_server': 'smtp.gmail.com',
            'smtp_port': 587
        }
        
        try:
            if os.path.exists('config.csv'):
                df = pd.read_csv('config.csv')
                config_dict = dict(zip(df['key'], df['value']))
                for key in config:
                    if key in config_dict and pd.notna(config_dict[key]) and config_dict[key] != '':
                        config[key] = config_dict[key]
            return config
        except Exception as e:
            print(f"Error loading config: {e}")
            return config
    
    def create_test_product(self, name, current_price, target_price, amazon_url):
        """Create a test product"""
        product = {
            'name': name,
            'current_price': current_price,
            'target_price': target_price,
            'original_price': current_price,
            'amazon_url': amazon_url,
            'price_history': [current_price],
        }
        self.test_products.append(product)
        return product
    
    def simulate_price_change(self, product, new_price):
        """Simulate a price change for a product"""
        old_price = product['current_price']
        product['current_price'] = new_price
        product['price_history'].append(new_price)
        
        print(f"{product['name']}: ${old_price:.2f} -> ${new_price:.2f}")
        
        # Check if target price is reached
        if new_price <= product['target_price']:
            print(f"TARGET PRICE REACHED for {product['name']}!")
            self.send_price_alert(product, old_price)
            return True
        
        # Check for significant price drop (>10%)
        if (old_price - new_price) / old_price > 0.10:
            print(f"SIGNIFICANT PRICE DROP for {product['name']}!")
            self.send_price_drop_alert(product, old_price)
            return True
        
        return False
    
    def send_price_alert(self, product, old_price):
        """Send price alert when target is reached"""
        subject = f"Price Alert: {product['name']} - Target Reached!"
        
        # Calculate savings
        savings = product['original_price'] - product['current_price']
        savings_percent = (savings / product['original_price']) * 100
        
        body = f"""
🎉 GREAT NEWS! Your target price has been reached!

Product: {product['name']}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💰 PRICE INFORMATION:
   Current Price: ${product['current_price']:.2f}
   Your Target: ${product['target_price']:.2f}
   Previous Price: ${old_price:.2f}
   Original Price: ${product['original_price']:.2f}

📊 SAVINGS ANALYSIS:
   Total Savings: ${savings:.2f} ({savings_percent:.1f}% off)
   
🎯 RECOMMENDATION: BUY NOW!
   This is an excellent time to purchase. The price has reached your target!

📈 PRICE HISTORY:
   Lowest: ${min(product['price_history']):.2f}
   Highest: ${max(product['price_history']):.2f}
   Average: ${sum(product['price_history'])/len(product['price_history']):.2f}

🛒 PURCHASE LINK:
   {product['amazon_url']}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
This alert was generated by your AI-Driven Price Monitoring System.
Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
        
        self.send_email(subject, body.strip())
    
    def send_price_drop_alert(self, product, old_price):
        """Send alert for significant price drop"""
        subject = f"Price Drop Alert: {product['name']} - Significant Drop!"
        
        drop_amount = old_price - product['current_price']
        drop_percent = (drop_amount / old_price) * 100
        
        body = f"""
📉 SIGNIFICANT PRICE DROP DETECTED!

Product: {product['name']}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💸 PRICE DROP DETAILS:
   Previous Price: ${old_price:.2f}
   Current Price: ${product['current_price']:.2f}
   Drop Amount: ${drop_amount:.2f}
   Drop Percentage: {drop_percent:.1f}%

🎯 TARGET ANALYSIS:
   Your Target: ${product['target_price']:.2f}
   Distance to Target: ${product['current_price'] - product['target_price']:.2f}

📊 RECOMMENDATION:
   {"🟢 EXCELLENT OPPORTUNITY! Consider buying now." if product['current_price'] <= product['target_price'] * 1.1 else "🟡 Good price drop, but monitor for further decreases."}

🛒 PURCHASE LINK:
   {product['amazon_url']}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
This alert was generated by your AI-Driven Price Monitoring System.
Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
        
        self.send_email(subject, body.strip())
    
    def send_email(self, subject, body):
        """Send email notification with proper error handling"""
        if not EMAIL_AVAILABLE:
            print("Email modules not available. Simulating email:")
            self.simulate_email(subject, body)
            return False
            
        if not self.config.get('smtp_password'):
            print("SMTP password not configured. Simulating email:")
            self.simulate_email(subject, body)
            return False
        
        try:
            # Use correct case-sensitive class names
            msg = MIMEMultipart()
            msg['From'] = self.config['smtp_username']
            msg['To'] = self.config['email_address']
            msg['Subject'] = subject
            
            msg.attach(MIMEText(body, 'plain'))
            
            print(f"Sending email to {self.config['email_address']}...")
            print(f"Subject: {subject}")
            
            server = smtplib.SMTP(self.config['smtp_server'], int(self.config['smtp_port']))
            server.starttls()
            server.login(self.config['smtp_username'], self.config['smtp_password'])
            text = msg.as_string()
            server.sendmail(self.config['smtp_username'], self.config['email_address'], text)
            server.quit()
            
            print("Email sent successfully!")
            return True
            
        except Exception as e:
            print(f"Email failed: {e}")
            print("Falling back to email simulation:")
            self.simulate_email(subject, body)
            return False
    
    def simulate_email(self, subject, body):
        """Simulate email when actual sending fails"""
        print("\n" + "="*60)
        print("EMAIL SIMULATION")
        print("="*60)
        print(f"To: {self.config.get('email_address', 'Not configured')}")
        print(f"Subject: {subject}")
        print(f"\n{body}")
        print("="*60)
    
    def test_target_price(self):
        """Test target price reached scenario"""
        print("\nTARGET PRICE REACHED TEST")
        print("="*50)
        
        product = self.create_test_product(
            name="Amazon Echo Dot (4th Gen)", 
            current_price=49.99, 
            target_price=35.00,
            amazon_url="https://www.amazon.com/dp/B08L5TNJHG/"
        )
        
        print(f"Created test product: {product['name']}")
        print(f"   Current Price: ${product['current_price']:.2f}")
        print(f"   Target Price: ${product['target_price']:.2f}")
        print(f"\nSimulating price drop in 3 seconds...")
        time.sleep(3)
        
        self.simulate_price_change(product, 34.99)
        print(f"\nTest completed!")
    
    def test_price_drop(self):
        """Test significant price drop scenario"""
        print("\nSIGNIFICANT PRICE DROP TEST")
        print("="*50)
        
        product = self.create_test_product(
            name="Wireless Bluetooth Headphones", 
            current_price=89.99, 
            target_price=60.00,
            amazon_url="https://www.amazon.com/dp/TESTHEADPHONES/"
        )
        
        print(f"Created test product: {product['name']}")
        print(f"   Current Price: ${product['current_price']:.2f}")
        print(f"   Target Price: ${product['target_price']:.2f}")
        print(f"\nSimulating 15% price drop in 3 seconds...")
        time.sleep(3)
        
        new_price = product['current_price'] * 0.85
        self.simulate_price_change(product, new_price)
        print(f"\nTest completed!")
    
    def test_email_config(self):
        """Test email configuration with a simple message"""
        print("\nTESTING EMAIL CONFIGURATION")
        print("="*50)
        
        if not EMAIL_AVAILABLE:
            print("Email modules not available")
            return False
        
        if not self.config.get('smtp_password'):
            print("SMTP password not configured")
            return False
        
        subject = "Test Email - Price Monitor"
        body = f"""
TEST EMAIL SUCCESSFUL!

This is a test email from your AI-Driven Price Monitoring System.

Configuration Details:
- Email: {self.config['email_address']}
- SMTP Server: {self.config['smtp_server']}:{self.config['smtp_port']}
- Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

If you received this email, your email configuration is working correctly!

You're ready to receive price alerts!
        """
        
        return self.send_email(subject, body.strip())

def main():
    """Main function"""
    print("AI PRICE MONITOR - TESTING SCRIPT")
    print("="*60)
    print("Test email notifications without waiting for real price changes!")
    print("="*60)
    
    tester = PriceMonitorTester()
    
    print(f"\nEmail configured: {tester.config.get('email_address', 'Not configured')}")
    
    if EMAIL_AVAILABLE:
        print("Email modules loaded successfully!")
    else:
        print("Email modules failed to load - will simulate only")
    
    print("\nSelect a test scenario:")
    print("1. Target Price Reached Test")
    print("2. Test Email Configuration")
    
    choice = input("\nEnter your choice (1 or 2): ").strip()
    
    if choice == '1':
        tester.test_target_price()
    elif choice == '2':
        if tester.test_email_config():
            print("Email configuration test passed!")
        else:
            print("Email configuration test failed!")
    else:
        print("Invalid choice. Please run the script again and select 1 or 2.")

if __name__ == "__main__":
    main()

class PriceMonitorTester:
    def __init__(self):
        self.config = self.load_config()
        self.test_products = []
        
    def load_config(self):
        """Load email configuration from existing config.csv"""
        config = {
            'email_address': '',
            'smtp_username': '',
            'smtp_password': '',
            'smtp_server': 'smtp.gmail.com',
            'smtp_port': 587
        }
        
        try:
            if os.path.exists('config.csv'):
                df = pd.read_csv('config.csv')
                config_dict = dict(zip(df['key'], df['value']))
                for key in config:
                    if key in config_dict and pd.notna(config_dict[key]) and config_dict[key] != '':
                        config[key] = config_dict[key]
            return config
        except Exception as e:
            print(f"Error loading config: {e}")
            return config
    
    def create_test_product(self, name, current_price, target_price, amazon_url):
        """Create a test product"""
        product = {
            'name': name,
            'current_price': current_price,
            'target_price': target_price,
            'original_price': current_price,
            'amazon_url': amazon_url,
            'price_history': [current_price],
        }
        self.test_products.append(product)
        return product
    
    def simulate_price_change(self, product, new_price):
        """Simulate a price change for a product"""
        old_price = product['current_price']
        product['current_price'] = new_price
        product['price_history'].append(new_price)
        
        print(f"📊 {product['name']}: ${old_price:.2f} → ${new_price:.2f}")
        
        # Check if target price is reached
        if new_price <= product['target_price']:
            print(f"🎯 TARGET PRICE REACHED for {product['name']}!")
            self.send_price_alert(product, old_price)
            return True
        
        # Check for significant price drop (>10%)
        if (old_price - new_price) / old_price > 0.10:
            print(f"📉 SIGNIFICANT PRICE DROP for {product['name']}!")
            self.send_price_drop_alert(product, old_price)
            return True
        
        return False
    
    def send_price_alert(self, product, old_price):
        """Send price alert when target is reached"""
        subject = f"🎯 Price Alert: {product['name']} - Target Reached!"
        
        # Calculate savings
        savings = product['original_price'] - product['current_price']
        savings_percent = (savings / product['original_price']) * 100
        
        body = f"""
🎉 GREAT NEWS! Your target price has been reached!

Product: {product['name']}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💰 PRICE INFORMATION:
   Current Price: ${product['current_price']:.2f}
   Your Target: ${product['target_price']:.2f}
   Previous Price: ${old_price:.2f}
   Original Price: ${product['original_price']:.2f}

📊 SAVINGS ANALYSIS:
   Total Savings: ${savings:.2f} ({savings_percent:.1f}% off)
   
🎯 RECOMMENDATION: BUY NOW!
   This is an excellent time to purchase. The price has reached your target!

📈 PRICE HISTORY:
   Lowest: ${min(product['price_history']):.2f}
   Highest: ${max(product['price_history']):.2f}
   Average: ${sum(product['price_history'])/len(product['price_history']):.2f}

🛒 PURCHASE LINK:
   {product['amazon_url']}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
This alert was generated by your AI-Driven Price Monitoring System.
Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
        
        self.send_email(subject, body.strip())
    
    def send_price_drop_alert(self, product, old_price):
        """Send alert for significant price drop"""
        subject = f"📉 Price Drop Alert: {product['name']} - Significant Drop!"
        
        drop_amount = old_price - product['current_price']
        drop_percent = (drop_amount / old_price) * 100
        
        body = f"""
📉 SIGNIFICANT PRICE DROP DETECTED!

Product: {product['name']}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💸 PRICE DROP DETAILS:
   Previous Price: ${old_price:.2f}
   Current Price: ${product['current_price']:.2f}
   Drop Amount: ${drop_amount:.2f}
   Drop Percentage: {drop_percent:.1f}%

🎯 TARGET ANALYSIS:
   Your Target: ${product['target_price']:.2f}
   Distance to Target: ${product['current_price'] - product['target_price']:.2f}

📊 RECOMMENDATION:
   {"🟢 EXCELLENT OPPORTUNITY! Consider buying now." if product['current_price'] <= product['target_price'] * 1.1 else "🟡 Good price drop, but monitor for further decreases."}

🛒 PURCHASE LINK:
   {product['amazon_url']}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
This alert was generated by your AI-Driven Price Monitoring System.
Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
        
        self.send_email(subject, body.strip())
    
    def send_email(self, subject, body):
        """Send email notification with proper error handling"""
        if not EMAIL_AVAILABLE:
            print("⚠️ Email modules not available. Simulating email:")
            self.simulate_email(subject, body)
            return False
            
        if not self.config.get('smtp_password'):
            print("⚠️ SMTP password not configured. Simulating email:")
            self.simulate_email(subject, body)
            return False
        
        try:
            # Use correct case-sensitive class names
            msg = MIMEMultipart()  # Correct: MIMEMultipart
            msg['From'] = self.config['smtp_username']
            msg['To'] = self.config['email_address']
            msg['Subject'] = subject
            
            msg.attach(MIMEText(body, 'plain'))  # Correct: MIMEText
            
            print(f"📧 Sending email to {self.config['email_address']}...")
            print(f"Subject: {subject}")
            
            server = smtplib.SMTP(self.config['smtp_server'], int(self.config['smtp_port']))
            server.starttls()
            server.login(self.config['smtp_username'], self.config['smtp_password'])
            text = msg.as_string()
            server.sendmail(self.config['smtp_username'], self.config['email_address'], text)
            server.quit()
            
            print("✅ Email sent successfully!")
            return True
            
        except Exception as e:
            print(f"❌ Email failed: {e}")
            print("📧 Falling back to email simulation:")
            self.simulate_email(subject, body)
            return False
    
    def simulate_email(self, subject, body):
        """Simulate email when actual sending fails"""
        print("\n" + "="*60)
        print("📧 EMAIL SIMULATION")
        print("="*60)
        print(f"To: {self.config.get('email_address', 'Not configured')}")
        print(f"Subject: {subject}")
        print(f"\n{body}")
        print("="*60)
    
    def test_target_price(self):
        """Test target price reached scenario"""
        print("\n🎯 TARGET PRICE REACHED TEST")
        print("="*50)
        
        product = self.create_test_product(
            name="Amazon Echo Dot (4th Gen)", 
            current_price=49.99, 
            target_price=35.00,
            amazon_url="https://www.amazon.com/dp/B08L5TNJHG/"
        )
        
        print(f"📦 Created test product: {product['name']}")
        print(f"   Current Price: ${product['current_price']:.2f}")
        print(f"   Target Price: ${product['target_price']:.2f}")
        print(f"\n⏱️ Simulating price drop in 3 seconds...")
        time.sleep(3)
        
        self.simulate_price_change(product, 34.99)
        print(f"\n✅ Test completed!")
    
    def test_price_drop(self):
        """Test significant price drop scenario"""
        print("\n📉 SIGNIFICANT PRICE DROP TEST")
        print("="*50)
        
        product = self.create_test_product(
            name="Wireless Bluetooth Headphones", 
            current_price=89.99, 
            target_price=60.00,
            amazon_url="https://www.amazon.com/dp/TESTHEADPHONES/"
        )
        
        print(f"📦 Created test product: {product['name']}")
        print(f"   Current Price: ${product['current_price']:.2f}")
        print(f"   Target Price: ${product['target_price']:.2f}")
        print(f"\n⏱️ Simulating 15% price drop in 3 seconds...")
        time.sleep(3)
        
        new_price = product['current_price'] * 0.85
        self.simulate_price_change(product, new_price)
        print(f"\n✅ Test completed!")
    
    def test_email_config(self):
        """Test email configuration with a simple message"""
        print("\n📧 TESTING EMAIL CONFIGURATION")
        print("="*50)
        
        if not EMAIL_AVAILABLE:
            print("❌ Email modules not available")
            return False
        
        if not self.config.get('smtp_password'):
            print("❌ SMTP password not configured")
            return False
        
        subject = "🧪 Test Email - Price Monitor"
        body = f"""
🧪 TEST EMAIL SUCCESSFUL!

This is a test email from your AI-Driven Price Monitoring System.

Configuration Details:
- Email: {self.config['email_address']}
- SMTP Server: {self.config['smtp_server']}:{self.config['smtp_port']}
- Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

If you received this email, your email configuration is working correctly!

🎉 You're ready to receive price alerts!
        """
        
        return self.send_email(subject, body.strip())

def main():
    """Main function"""
    print("🧪 AI PRICE MONITOR - TESTING SCRIPT (FIXED)")
    print("="*60)
    print("Testing email notifications with corrected imports!")
    print("="*60)
    
    tester = PriceMonitorTester()
    
    print(f"\nEmail configured: {tester.config.get('email_address', 'Not configured')}")
    
    if EMAIL_AVAILABLE:
        print("✅ Email modules loaded successfully!")
    else:
        print("❌ Email modules failed to load - will simulate only")
    
    print("\nSelect a test scenario:")
    print("1. Target Price Reached Test")
    print("2. Significant Price Drop Test")
    print("3. Test Email Configuration")
    
    choice = input("\nEnter your choice (1, 2, or 3): ").strip()
    
    if choice == '1':
        tester.test_target_price()
    elif choice == '2': 
        tester.test_price_drop()
    elif choice == '3':
        if tester.test_email_config():
            print("✅ Email configuration test passed!")
        else:
            print("❌ Email configuration test failed!")
    else:
        print("❌ Invalid choice. Please run the script again and select 1, 2, or 3.")

if __name__ == "__main__":
    main()

class PriceMonitorTester:
    def __init__(self):
        self.config = self.load_config()
        self.test_products = []
        
    def load_config(self):
        """Load email configuration from existing config.csv"""
        config = {
            'email_address': '',
            'smtp_username': '',
            'smtp_password': '',
            'smtp_server': 'smtp.gmail.com',
            'smtp_port': 587
        }
        
        try:
            if os.path.exists('config.csv'):
                df = pd.read_csv('config.csv')
                config_dict = dict(zip(df['key'], df['value']))
                for key in config:
                    if key in config_dict and pd.notna(config_dict[key]) and config_dict[key] != '':
                        config[key] = config_dict[key]
            return config
        except Exception as e:
            print(f"Error loading config: {e}")
            return config
    
    def create_test_product(self, name, current_price, target_price, amazon_url):
        """Create a test product"""
        product = {
            'name': name,
            'current_price': current_price,
            'target_price': target_price,
            'original_price': current_price,
            'amazon_url': amazon_url,
            'price_history': [current_price],
        }
        self.test_products.append(product)
        return product
    
    def simulate_price_change(self, product, new_price):
        """Simulate a price change for a product"""
        old_price = product['current_price']
        product['current_price'] = new_price
        product['price_history'].append(new_price)
        
        print(f"📊 {product['name']}: ${old_price:.2f} → ${new_price:.2f}")
        
        # Check if target price is reached
        if new_price <= product['target_price']:
            print(f"🎯 TARGET PRICE REACHED for {product['name']}!")
            self.send_price_alert(product, old_price)
            return True
        
        # Check for significant price drop (>10%)
        if (old_price - new_price) / old_price > 0.10:
            print(f"📉 SIGNIFICANT PRICE DROP for {product['name']}!")
            self.send_price_drop_alert(product, old_price)
            return True
        
        return False
    
    def send_price_alert(self, product, old_price):
        """Send price alert when target is reached"""
        subject = f"🎯 Price Alert: {product['name']} - Target Reached!"
        
        # Calculate savings
        savings = product['original_price'] - product['current_price']
        savings_percent = (savings / product['original_price']) * 100
        
        body = f"""
🎉 GREAT NEWS! Your target price has been reached!

Product: {product['name']}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💰 PRICE INFORMATION:
   Current Price: ${product['current_price']:.2f}
   Your Target: ${product['target_price']:.2f}
   Previous Price: ${old_price:.2f}
   Original Price: ${product['original_price']:.2f}

📊 SAVINGS ANALYSIS:
   Total Savings: ${savings:.2f} ({savings_percent:.1f}% off)
   
🎯 RECOMMENDATION: BUY NOW!
   This is an excellent time to purchase. The price has reached your target!

📈 PRICE HISTORY:
   Lowest: ${min(product['price_history']):.2f}
   Highest: ${max(product['price_history']):.2f}
   Average: ${sum(product['price_history'])/len(product['price_history']):.2f}

🛒 PURCHASE LINK:
   {product['amazon_url']}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
This alert was generated by your AI-Driven Price Monitoring System.
Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
        
        self.send_email(subject, body.strip())
    
    def send_price_drop_alert(self, product, old_price):
        """Send alert for significant price drop"""
        subject = f"📉 Price Drop Alert: {product['name']} - Significant Drop!"
        
        drop_amount = old_price - product['current_price']
        drop_percent = (drop_amount / old_price) * 100
        
        body = f"""
📉 SIGNIFICANT PRICE DROP DETECTED!

Product: {product['name']}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💸 PRICE DROP DETAILS:
   Previous Price: ${old_price:.2f}
   Current Price: ${product['current_price']:.2f}
   Drop Amount: ${drop_amount:.2f}
   Drop Percentage: {drop_percent:.1f}%

🎯 TARGET ANALYSIS:
   Your Target: ${product['target_price']:.2f}
   Distance to Target: ${product['current_price'] - product['target_price']:.2f}

📊 RECOMMENDATION:
   {"🟢 EXCELLENT OPPORTUNITY! Consider buying now." if product['current_price'] <= product['target_price'] * 1.1 else "🟡 Good price drop, but monitor for further decreases."}

🛒 PURCHASE LINK:
   {product['amazon_url']}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
This alert was generated by your AI-Driven Price Monitoring System.
Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
        
        self.send_email(subject, body.strip())
    
    def send_email(self, subject, body):
        """Send email notification"""
        if not EMAIL_AVAILABLE:
            self.simulate_email(subject, body)
            return False
            
        if not self.config.get('smtp_password'):
            print("⚠️ SMTP password not configured. Simulating email:")
            self.simulate_email(subject, body)
            return False
        
        try:
            msg = MimeMultipart()
            msg['From'] = self.config['smtp_username']
            msg['To'] = self.config['email_address']
            msg['Subject'] = subject
            
            msg.attach(MimeText(body, 'plain'))
            
            print(f"📧 Sending email: {subject}")
            
            server = smtplib.SMTP(self.config['smtp_server'], int(self.config['smtp_port']))
            server.starttls()
            server.login(self.config['smtp_username'], self.config['smtp_password'])
            text = msg.as_string()
            server.sendmail(self.config['smtp_username'], self.config['email_address'], text)
            server.quit()
            
            print("✅ Email sent successfully!")
            return True
            
        except Exception as e:
            print(f"❌ Email failed: {e}")
            self.simulate_email(subject, body)
            return False
    
    def simulate_email(self, subject, body):
        """Simulate email when actual sending fails"""
        print("\n" + "="*60)
        print("📧 EMAIL SIMULATION")
        print("="*60)
        print(f"To: {self.config.get('email_address', 'Not configured')}")
        print(f"Subject: {subject}")
        print(f"\n{body}")
        print("="*60)
    
    def test_target_price(self):
        """Test target price reached scenario"""
        print("\n🎯 TARGET PRICE REACHED TEST")
        print("="*50)
        
        product = self.create_test_product(
            name="Amazon Echo Dot (4th Gen)", 
            current_price=49.99, 
            target_price=35.00,
            amazon_url="https://www.amazon.com/dp/B08L5TNJHG/"
        )
        
        print(f"📦 Created test product: {product['name']}")
        print(f"   Current Price: ${product['current_price']:.2f}")
        print(f"   Target Price: ${product['target_price']:.2f}")
        print(f"\n⏱️ Simulating price drop in 3 seconds...")
        time.sleep(3)
        
        self.simulate_price_change(product, 34.99)
        print(f"\n✅ Test completed!")
    
    def test_price_drop(self):
        """Test significant price drop scenario"""
        print("\n📉 SIGNIFICANT PRICE DROP TEST")
        print("="*50)
        
        product = self.create_test_product(
            name="Wireless Bluetooth Headphones", 
            current_price=89.99, 
            target_price=60.00,
            amazon_url="https://www.amazon.com/dp/TESTHEADPHONES/"
        )
        
        print(f"📦 Created test product: {product['name']}")
        print(f"   Current Price: ${product['current_price']:.2f}")
        print(f"   Target Price: ${product['target_price']:.2f}")
        print(f"\n⏱️ Simulating 15% price drop in 3 seconds...")
        time.sleep(3)
        
        new_price = product['current_price'] * 0.85
        self.simulate_price_change(product, new_price)
        print(f"\n✅ Test completed!")

def main():
    """Main function"""
    print("🧪 AI PRICE MONITOR - TESTING SCRIPT")
    print("="*60)
    print("Test email notifications without waiting for real price changes!")
    print("="*60)
    
    tester = PriceMonitorTester()
    
    print(f"\nEmail configured: {tester.config.get('email_address', 'Not configured')}")
    print("\nSelect a test scenario:")
    print("1. Target Price Reached Test")
    print("2. Significant Price Drop Test")
    
    choice = input("\nEnter your choice (1 or 2): ").strip()
    
    if choice == '1':
        tester.test_target_price()
    elif choice == '2': 
        tester.test_price_drop()
    else:
        print("❌ Invalid choice. Please run the script again and select 1 or 2.")

if __name__ == "__main__":
    main()
